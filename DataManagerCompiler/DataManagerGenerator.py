__author__      = "Noreddine Kessa"
__copyright__   = "!"
__license__ = "MIT License"

from datetime import date
from variable import *
from Beautifier import *
   
class DataManagerGenerator:

    def __init__(self, variableList=[],enumerationList=[], moduleName="DataManager", accessors_prefix="DataManager", CFileHeadersList=[], HFileHeaderList=[] ):
        self.Version = "V0.01"
        self.variableList = variableList
        self.enumerationList = enumerationList
        self.moduleName = moduleName
        self.CFileHeadersList = CFileHeadersList
        self.HFileHeaderList = HFileHeaderList
        self.accessors_prefix = accessors_prefix
        
        self.Disclamer_Header=f'/*!\n*Generated by DataManagerGenerator {self.Version}, do not edit manualy\n'
        self.Disclamer_Header+=f'*@file {moduleName}.h\n'
        self.Disclamer_Header+=f'*@date {date.today()}\n'
        self.Disclamer_Header+=f'*@author n.kessa\n'
        self.Disclamer_Header+=f'*@brief Manages device global configurations and device data flow between software modules.\n'
        self.Disclamer_Header+=f'*\n'
        self.Disclamer_Header+=f'*/\n\n'
        
        self.Disclamer_Source=f''
        self.Disclamer_Source+=f'/*!\n*Generated by DataManagerGenerator, do not edit manualy\n'
        self.Disclamer_Source+=f'*@file {moduleName}.c\n'
        self.Disclamer_Source+=f'*@date {date.today()}\n'
        self.Disclamer_Source+=f'*@author n.kessa\n'
        self.Disclamer_Source+=f'*@brief Manages device global configurations and device data flow between software modules.\n'
        self.Disclamer_Source+=f'*\n'
        self.Disclamer_Source+=f'*/\n\n'
        
        self.CPPGuardStart = f'\n#ifdef __cplusplus \nextern \"C\" \n{{ \n#endif		/* __cplusplus */ \n'
        self.CPPGuardEnd = f'#ifdef __cplusplus\n}}\n#endif		/* __cplusplus */\n'
        
        
    def generateHeaderFile(self):
        out = ""
        
        out+= self.Disclamer_Header
        
        #add guard
        out+=f'#ifndef {self.moduleName.upper()}_H \n'
        out+=f'#define {self.moduleName.upper()}_H \n'
        
        #add CPP guard
        out+=self.CPPGuardStart
        
        #add includes
        i = 0
        while i < len(self.HFileHeaderList):
            out+=self.HFileHeaderList[i]
            i = i + 1
            
        #add typedef if exist
        if len(self.enumerationList)>0:
             out+=f'#include "{self.moduleName}_typedef.h\n"'

        #add variables related stuff
        i = 0
        while i < len(self.variableList):
            self.variableList[i].accessors_prefix = self.accessors_prefix
            out+=f'/*****************************start of {self.variableList[i].name} definitions*************************************/\n'
            out+=self.variableList[i].get_header_definition()
            out+=f'/*****************************end of {self.variableList[i].name} definitions*************************************/\n\n'
            i = i + 1
        
        #close the cpp guard
        out+=self.CPPGuardEnd
        
        #close the guard
        out+=f'#endif /* {self.moduleName.upper()}_H */ \n'
  
        print("h file cintent" + out)
        f = open(f'{self.moduleName}.h', "w")
        f.write(out)
        f.close()
        
        #formating file
        beautifier =Beautifier()
        beautifier.beatify(f'{self.moduleName}.h')
        
    def generateTypeDefFile(self):
    
    
        #if no enumeration are provided just return 
        if len(self.enumerationList)<=0:
            return 
            
        #start building the string    
        out = ""
        
        out+= self.Disclamer_Header
        
        #add guard
        out+=f'#ifndef {self.moduleName.upper()}TYPEDEF_H \n'
        out+=f'#define {self.moduleName.upper()}TYPEDEF_H \n'
        
        #add CPP guard
        out+=self.CPPGuardStart
        
        #add includes
        i = 0
        while i < len(self.HFileHeaderList):
            out+=self.HFileHeaderList[i]
            i = i + 1

        #add variables related stuff
        i = 0
        while i < len(self.enumerationList):
            out+="\n\n"
            out+=self.enumerationList[i].get_definition()
            i = i + 1
        
        #close the cpp guard
        out+="\n\n"
        out+=self.CPPGuardEnd
        
        #close the guard
        out+=f'#endif /* {self.moduleName.upper()}TYPEDEF_H */ \n'
  
        print("h file cintent" + out)
        f = open(f'{self.moduleName}_typedef.h', "w")
        f.write(out)
        f.close()
        
        #formating file
        beautifier =Beautifier()
        beautifier.beatify(f'{self.moduleName}_typedef.h')
        
        
        
    def generateSourceFile(self):
    
        out=""
        out+= self.Disclamer_Source
        #add includes
        i = 0
        while i < len(self.CFileHeadersList):
            out+=self.CFileHeadersList[i]
            i = i + 1
        
        #add the cpp guard start 
        out+=self.CPPGuardStart    

        #add variables related stuff
        i = 0
        while i < len(self.variableList):
            self.variableList[i].accessors_prefix = self.accessors_prefix
            out+=f'/*****************************start of {self.variableList[i].name} definitions*************************************/\n'
            out+=self.variableList[i].get_source_implementation()
            out+=f'/*****************************end of {self.variableList[i].name} definitions*************************************/\n\n'
            i = i + 1

        #add the cpp guard end 
        out+=self.CPPGuardEnd
        
        print(out)
        f = open(f'{self.moduleName}.c', "w")
        f.write(out)
        f.close()
        
        #formating file
        beautifier =Beautifier()
        beautifier.beatify(f'{self.moduleName}.c')
        
